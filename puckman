#!/bin/bash

get_github_token(){
    local locations=(
        "$HOME/Sync/$USER/.githubtoken"
        "$HOME/.githubtoken"
        "/etc/githubtoken"
    )    
    for l in "${locations[@]}"; do
        if [ -f "$l" ];then
            GITHUB_TOKEN=("--header" "Authorization: token $(cat $l)")
            export GITHUB_TOKEN
            break
        fi
    done
}

get_env_vars(){
    #try default locations
    local locations=( 
        "$HOME/Sync/puckman"
        "$HOME/.config/puckman"
        "/etc/puckman"
    )
    PUCKMAN_LIST=""
    PUCKMAN_DESCRIPTIONS=""
    for l in "${locations[@]}"; do
        if [ -d "$l" ];then
            PUCKMAN_LIST="${l}/packages.txt"
            PUCKMAN_DESCRIPTIONS="${l}/descriptions.txt"
            PUCKMAN_CONFIG="${l}/puckman.conf"
            break
        fi
    done

    [ -z "$PUCKMAN_CACHE" ] && PUCKMAN_CACHE=/var/cache/tmp/puckman
    export PUCKMAN_CACHE
    [ -z "$PUCKMAN_PKG" ] && PUCKMAN_PKG=/var/cache/puckman
    export PUCKMAN_PKG
    [ -z "$PUCKMAN_CONFIG" ] && PUCKMAN_CONFIG="/etc/puckman/puckman.conf"
    export PUCKMAN_CONFIG
    [ -z "$PUCKMAN_DESCRIPTIONS" ] && PUCKMAN_DESCRIPTIONS="/etc/puckman/descriptions.txt"
    export PUCKMAN_DESCRIPTIONS
    [ -z "$PUCKMAN_LIST" ] && PUCKMAN_LIST="/etc/puckman/packages.txt"
    export PUCKMAN_LIST
}

levenshtein() {
    if [ "$#" -ne "2" ]; then
        echo "Usage: $0 word1 word2" >&2
    elif [ "${#1}" -lt "${#2}" ]; then
        levenshtein "$2" "$1"
    else
        local str1len=$((${#1}))
        local str2len=$((${#2}))
        local d i j
        for i in $(seq 0 $(((str1len+1)*(str2len+1)))); do
            d[i]=0
        done
        for i in $(seq 0 $((str1len))); do
            d[$((i+0*str1len))]=$i
        done
        for j in $(seq 0 $((str2len))); do
            d[$((0+j*(str1len+1)))]=$j
        done

        for j in $(seq 1 $((str2len))); do
            for i in $(seq 1 $((str1len))); do
                [ "${1:i-1:1}" = "${2:j-1:1}" ] && local cost=0 || local cost=1
                local del=$((d[(i-1)+str1len*j]+1))
                local ins=$((d[i+str1len*(j-1)]+1))
                local alt=$((d[(i-1)+str1len*(j-1)]+cost))
                d[i+str1len*j]=$(echo -e "$del\n$ins\n$alt" | sort -n | head -1)
            done
        done
        echo ${d[str1len+str1len*(str2len)]}
    fi
# while read str1; do
#         while read str2; do
#                 lev=$(levenshtein "$str1" "$str2");
#                 printf '%s / %s : %s\n' "$str1" "$str2" "$lev"
#         done < "$2"
# done < "$1"
}

levenshtein_pylev(){
py_script="
import pylev
distance = pylev.levenshtein('$1', '$2')
print (distance)
"
python3 -c "$py_script" $1 $2
}

calculate_levenshtein(){
    local best_value
    local best_link
    local current_value
    echo "Calculating best levenshtein value..."
    if python3 -c "import pylev" 2> /dev/null;then
	echo "Using python3 pylev implementation"
	LEVENSHTEIN_CMD=levenshtein_pylev
    else
        echo "Consider installing python3-pylev for a faster Levenshtein algorithm implementation"
	LEVENSHTEIN_CMD=levenshtein
    fi
    while read -r line;do
        current_value=$($LEVENSHTEIN_CMD "$(basename $line)" "$1")
        [ -z $best_value ] && best_value=$current_value
        [ -z $best_link ] && best_link=$line
        if [ $current_value -eq 0 ];then
            download_link=$line
            return 0
        elif [ $current_value -lt $best_value ];then
            best_link=$line
            best_value=$current_value
        fi            
    done < <( github_release $link )
    download_link=$best_link
    echo "best value: $best_value"
    echo "best link: $best_link"
}




search (){
    #expects search term in global variable $package and modifies it to reflect the result
    local search_results

    readarray -t search_results < <(github_search "$package")
    [  ${#search_results[@]} -lt 1 ] && return 1
    echo "----------------------"
    echo "Search results"
    echo 
    for index in "${!search_results[@]}";do echo "$((index + 1)). ${search_results[$index]}";done
    #printf "%s\n" "${search_results[@]}"
    echo
    echo "Do you want to install any of them?"
    echo "Enter a number or just press <return> to skip"
    read -rp "Choose a number: " index

    if [[ "$index" =~ ^[0-9]+$ ]] && [ "$index" -gt 0 ] && [ "$index" -le  ${#search_results[@]} ];then
        package=$(echo "${search_results[((index - 1))]}" | awk '{print $1}')
        export package
        return 0
    fi
    return 1
}

github_search(){
    # query github with query string and return projects sorted by stars
    local query="$1"
    $WGET --header "Accept: application/vnd.github+json" "${GITHUB_TOKEN[@]}" "https://api.github.com/search/repositories?q=$query in:name,description" -qO - \
    | jq  -r '.items | sort_by(.stargazers_count) |reverse | .[]| "\(.full_name)\t\(.stargazers_count)\t\(.description)"'  | head -n20 | column -ts $'\t'
}

github_release_picker(){
    local search_results

    readarray -t search_results < <(github_release "$1")
    [  ${#search_results[@]} -lt 1 ] && return 1
    echo "----------------------"
    echo "Release artifacts available"
    echo 
    for index in "${!search_results[@]}";do echo "$((index + 1)). ${search_results[$index]}";done
    echo "Pick the appropriate download for your system"
    echo "Enter a number or just press <return> to skip"
    read -rp "Choose a number: " index

    if [[ "$index" =~ ^[0-9]+$ ]] && [ "$index" -gt 0 ] && [ "$index" -le  ${#search_results[@]} ];then
        download_link=$(echo "${search_results[((index - 1))]}" | awk '{print $1}')
        export download_link
        return 0
    fi
    return 1
}

github_release(){
    if [ -n "$1" ];then 
        $WGET --header "Accept: application/vnd.github+json" "${GITHUB_TOKEN[@]}" "https://api.github.com/repos/$1/releases/latest" -qO - | jq -r '.assets[].browser_download_url'        
    else
        echo "Please provide github  <user/project> string e.g. borgbackup/borg"; 
        return 1
    fi
    return 0
}

trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    printf '%s' "$var"
}

url_size(){
    local output
    output=$($WGET --spider --server-response -q "$1" 2>&1 |grep -i content-length | awk '{$1=""}1'|tail -n1)
    trim "$output"
}

url_timestamp(){
    local output
    output=$($WGET --spider --server-response -q "$1" 2>&1 |grep -i last-modified | awk '{$1=""}1'|tail -n1)
    output=$(date -d "$output" +%s)
    trim "$output"
}

archive_count(){
    #output count of files in archive 
    # if count=1 also orig name and final name
    # files to ignore
    release_artifacts_to_ignore='.*txt$\|LICENSE\|.*md$\|README$\|NEWS$\|CHANGELOG$\|\/$'
    local count=0
    local temp=$(mktemp)
    local original_name="-"
    local final_name="-"
    case $# in
        1) 
            local file="$1"
            [ ! -f "$PUCKMAN_PKG/$file" ] && echo 0 && return 1
            ;;
        *) 
            echo 0 && return 1
            ;;
    esac
    case $file in
        *.zip)
            unzip -Z1 "$PUCKMAN_PKG/$file" | grep -iv "$release_artifacts_to_ignore" > $temp
            count=$(wc -l "$temp" | awk '{print $1}')
            ;;
        *.tar.gz|*.tgz|*.tbz|*.tar.xz|*.txz|*.tar.bz2|*.tbz2)
            tar -tf "$PUCKMAN_PKG/$file" | grep -iv "$release_artifacts_to_ignore" > $temp
            count=$(wc -l "$temp" | awk '{print $1}')
            ;;
        *.bz2)
            count=1
            original_name="${file%.bz2}"
            final_name="/usr/local/bin/$(expr match "$final_name" '\([a-z]\+\)')"
            echo "${count}#${original_name}#${final_name}"
            return 0
            ;;
    esac

    #OUTPUT:
    # count#orig#final
    if [ $count -eq 1 ];then
        original_name=$(cat $temp)
        final_name=/usr/local/bin/$(expr match "$original_name" '\([a-z]\+\)')
    fi
    echo "${count}#${original_name}#${final_name}"
    return 0
}

get_download_link(){
    #Complex AI algorithm to determine what the fuck the user wants to install

    local bits=$(getconf LONG_BIT) # just 32 or 64
    local arch_uname=$(uname -m)  #prints values such as x86_64, i686, arm, or aarch64
    # also only for debuntu: dpkg --print-architecture
    local arch_other=""
    local arch_weird=""
    case $arch_uname in
        i386|i686) arch_other="386" ;;
        x86_64)    arch_other="amd64" ;;
        arm)       arch_other="arm" ;;
    esac
    case $arch_uname in
        i386|i686) arch_weird="intel" ;;
        x86_64)    arch_weird="intel" ;;
        arm)       arch_weird="arm" ;;
    esac

    #Smart select without regex (it's just a bunch of IFs)
    local release_temp=$(mktemp)
    local candidates_temp=$(mktemp)
    local candidates_count=0
    github_release $link > $release_temp

    #try to find deb or rpm
    { type yum &>/dev/null && pkg=rpm ;} || { type apt &>/dev/null && pkg=deb ;}
    if [ -n "$pkg" ];then
        cat $release_temp | grep "$pkg\$" | grep "$arch_other\|$arch_uname\|$arch_weird" > $candidates_temp
        candidates_count=$(wc -l $candidates_temp | awk '{print $1}')
        [ $candidates_count -eq 1 ] && cat $candidates_temp && return 0
        # Sometimes there is only one package and no arch references
        cat $release_temp | grep "$pkg\$"  > $candidates_temp
        candidates_count=$(wc -l $candidates_temp | awk '{print $1}')
        [ $candidates_count -eq 1 ] && cat $candidates_temp && return 0    
    fi

    # No package manager. We discard packages and pray to the fortune gods
    # also sometimes there are releases for other (heretic) OSes. We select the one and only:
    cat $release_temp |  grep -iv 'deb$\|rpm$\|asc$\|exe$\|dmg$\|sig$\|windows\|macos\|apple\|darwin' | grep -i "$arch_other\|$arch_uname\|$arch_weird" > $candidates_temp
    candidates_count=$(wc -l $candidates_temp | awk '{print $1}')
    [ $candidates_count -eq 1 ] && cat $candidates_temp && return 0

    # Sometimes there is no architecture for the default architecture
    if [ $arch_uname = "x86_64" ];then
        cat $release_temp |  grep -iv 'deb$\|rpm$\|asc$\|exe$\|dmg$\|sig$\|windows\|macos\|apple\|darwin\|arm\|aarch' | grep -v SHA > $candidates_temp
        candidates_count=$(wc -l $candidates_temp | awk '{print $1}')
        [ $candidates_count -eq 1 ] && cat $candidates_temp && return 0
    fi

        
    # Sometimes just a binary with the program name is provided
    cat $release_temp |  grep "$(basename $link)\$"   > $candidates_temp
    candidates_count=$(wc -l $candidates_temp | awk '{print $1}')
    [ $candidates_count -eq 1 ] && cat $candidates_temp && return 0



    # If everything failed, try regex
    if [ -n "$regex" ];then
        cat $release_temp | grep -m 1 -E "$regex" | tr -d '"'    
    fi
}

install(){
    local link=""
    local regex=""
    local download_link=""
    local download_file=""
    local original_name=""
    local final_name=""
    local count=0    
    
    local matches=$(grep -c "$package" "$PUCKMAN_LIST")
    if [ -z $matches ] || [ $matches -eq 0 ];then
        echo
        echo "No matches for [ $package ]."
        echo
        echo "Searching for candidates:"
        
        if ! search "$package" ;then 
            return 1
        else
            link="$package"
        fi
    elif [ $matches -gt 1 ];then
        echo
        echo "More than one match found for [ $package ]. Refine your search term."
        echo "Results:"
        #TODO select
        echo
        grep "$package" "$PUCKMAN_LIST"
        echo
        return 1
    elif [ $matches -eq 1 ];then
        # Read regex and link and check if not empty
        IFS="#" read -r link regex editors_pick < <(grep "$package" "$PUCKMAN_LIST")

        if [[ -z "$regex" ]]; then
            echo "No regex defined: $link"
        fi
    fi
    # At this point we should have at least a desired project
    # Check if it is already in the config file and add it otherwise
    if ! grep "$package" "$PUCKMAN_LIST";then
        echo "Adding package $package to list in $PUCKMAN_LIST"
        echo "$package" >> $PUCKMAN_LIST
    fi
    #If regex is a pip command we don't need to try github at all
    if [[ "$regex" =~ pip|pip2|pip3 ]];then
        #regex should be the appropriate command and link the package name
        echo "installing $link using pip"
        echo "COMMAND: $regex install --upgrade $link"
        sudo $regex install --upgrade $link
        return $?
    fi
    
    #If we have recorded latest pick, use that to find out the best candidate
    if [ -n "$editors_pick" ];then
        # first try an easy win
        download_link=$(github_release $link | grep "/$editors_pick\$")
        # if that doesn't we try the more expensive method
        if [[ -z "$download_link" ]]; then    
            calculate_levenshtein "$editors_pick"
        fi
    fi
    # Otherwise try AI
    if [[ -z "$download_link" ]]; then
        download_link=$(get_download_link)
    fi
    # Finally show the menu to pick manually
    if [[ -z "$download_link" ]]; then
        echo "ChatGPT powered AI system couldn't found a candidate for your system. A human touch is necessary"
        github_release_picker $link
        if [ $(grep -c $link $PUCKMAN_LIST) -eq 1 ];then
            # if the user handpicked a link, we save that as editors_pick to apply levenshtein on future calls
            local t=$(mktemp)
            grep -v $link $PUCKMAN_LIST > $t
            echo "$link##$(basename $download_link)" >> $t
            mv $t $PUCKMAN_LIST
        else
            echo "$link##$(basename $download_link)" >> $PUCKMAN_LIST
        fi
    fi
    
    download_file=$(basename $download_link)
    if [[ -z "$download_file" ]]; then
        echo "download link is wrong or bad format. Download link is: $download_link" && return 1
    fi

    local download=0
    if [ -f "$PUCKMAN_PKG/$download_file" ];then
        download=-1
        echo "File $download_file already exists. Checking similarities"
        local url_size=$(url_size "$download_link")
        local url_timestamp=$(url_timestamp "$download_link")
        local local_size=$(stat --format %s "$PUCKMAN_PKG/$download_file")
        local local_timestamp=$(stat --format %Y "$PUCKMAN_PKG/$download_file")

        echo 
        echo "local_timestamp: $local_timestamp"
        echo "url_timestamp:   $url_timestamp"
        echo "local_size:      $local_size"
        echo "url_size:        $url_size"
        echo

        if [ $local_size -ne $url_size ] || [ $local_timestamp -ne $url_timestamp ];then 
            echo "Size or date don't match. Download the file"
            download=0
        fi
    fi
    if [ $download -eq 0 ];then 
        echo Downloading...
        [ -n "$regex" ] && find $PUCKMAN_PKG -type f -iregex '.*'"$regex" -delete
        cd  $PUCKMAN_PKG && wget "$download_link" && cd -
    fi

    # - actually install (basename extension, tar, deb etc)
    
    IFS="#" read -r count original_name final_name < <(archive_count "$download_file")
    case $download_file in
        *.deb)
            echo "It is a debian package. Install with dpkg:"
            local package_name=$(dpkg-deb -I  $PUCKMAN_PKG/$download_file  | grep -Po '(?<=Package: ).*')
            local package_version=$(dpkg-deb -I  $PUCKMAN_PKG/$download_file  | grep -Po '(?<=Version: ).*')
            if dpkg --get-selections | grep $package_name &> /dev/null ;then
                #already installed, check version
                local installed_package_version=$(apt show $package_name | grep -Po '(?<=Version: ).*')
                if [ "$package_version" = "$installed_package_version" ];then 
                    echo ""
                    echo "Version $package_version of package $package_name is already installed"
                    echo ""
                    echo "You can manually install the package with:"
                    echo "sudo dpkg -i $PUCKMAN_PKG/$download_file"
                    return 0
                else
                    echo "Version $installed_package_version of package $package_name is already installed. Proceeding to install new version: $package_version"
                fi
            fi
            echo "INSTALLING DEB PACKAGE: sudo dpkg -i $PUCKMAN_PKG/$download_file"
            sudo dpkg -i $PUCKMAN_PKG/$download_file
            sudo apt install -f
            ;;
        *.zip)
            if [ $count -eq 1 ];then
                # original and final names calculated in archive_count
                echo "It is an archive with only one file (after discarding irrelevant artifacts). Hopefully a binary alone. Trying to install to /usr/local/bin"
                echo "Candidate file is: $original_name"
                cd $PUCKMAN_CACHE
                # we overwrite in case a wrong package with same file names has been extracted here before
                unzip -o $PUCKMAN_PKG/$download_file
                cp "$PUCKMAN_CACHE/$original_name" "$final_name"
                cd -
                echo "Installed to $final_name"
            else
                echo There seems to be more than a single binary. 
                echo You are on your own. Package has already been downloaded to:
                echo $PUCKMAN_PKG/$download_file
            fi
            ;;
        *.tar.gz|*.tgz|*.tbz|*.tar.xz|*.txz|*.tar.bz2|*.tbz2)
            if [ $count -eq 1 ];then
                echo "It is an archive with only one file (after discarding irrelevant artifacts). Hopefully a binary alone. Trying to install to /usr/local/bin"
                echo "Candidate file is: $original_name"
                cd "$PUCKMAN_CACHE"
                tar -xf $PUCKMAN_PKG/$download_file
                local final_name=/usr/local/bin/$(expr match "$original_name" '\([a-z]\+\)')
                cp "$PUCKMAN_CACHE/$original_name" "$final_name"
                cd -
                echo "Installed to $final_name"
            else
                echo There seems to be more than a single binary. 
                echo You are on your own. Package has already been downloaded to:
                echo $PUCKMAN_PKG/$download_file
            fi
            ;;
        *.bz2)
            echo it is a non-tar bz2. Hopefully a binary alone
            bunzip2 $PUCKMAN_PKG/$download_file
            chmod +x $PUCKMAN_PKG/$original_name
            local final_name=/usr/local/bin/$(expr match "$original_name" '\([a-z]\+\)')
            #local final_name=${download_file%.bz2}
            echo "Copying to $final_name"
            cp $PUCKMAN_PKG/$original_name "$final_name"
            ;;
        *)
            if file $PUCKMAN_PKG/$download_file | grep 'ELF\|shell script\|script executable' &> /dev/null ;then
                echo it is a single binary or script
                echo installing to /usr/local/bin/$(basename $link)
                cp $PUCKMAN_PKG/$download_file /usr/local/bin/$(basename $link)
                chmod +x /usr/local/bin/$(basename $link)
            fi
            ;;
    esac

    return 0
    # fi
    # echo "I don't know how to $action $package."
    # return 1
}

file_age(){
    if [ -e "$1" ] && [ -f "$1" ] && [ -s "$1" ];then
        echo -n "$((($(date +%s) - $(date +%s -r "$1")) / 86400)) days"
    else
        echo -n "0 days"
    fi
}
list(){
    local n=15
    local n_days_ago=/tmp/${n}_days_ago
    touch -d "$n days ago" $n_days_ago
    if user_is_root ;then
        if [ ! -f $PUCKMAN_DESCRIPTIONS ] || [ $PUCKMAN_DESCRIPTIONS -ot $n_days_ago ] || [ $(grep -c '^' $PUCKMAN_DESCRIPTIONS) -ne $(grep -c '/' $PUCKMAN_LIST) ];then
            local tmp_file=$(mktemp)
            while read -r project;do
                #TODO: fix me
                { echo -en "$project\t"; $WGET  --header "Accept: application/vnd.github+json" "${GITHUB_TOKEN[@]}" "https://api.github.com/repos/$project" -qO - | jq .stargazers_count,.description | awk -v d="\t" '{s=(NR==1?s:s d)$0}END{print s}' ;} >> $tmp_file
            done < <(cut -d '#' -f 1 $PUCKMAN_LIST| grep '/')
            mv $tmp_file $PUCKMAN_DESCRIPTIONS
        fi
        # Make sure others have read access
        chmod uga+r "$PUCKMAN_DESCRIPTIONS"
    else
        if [ -e $PUCKMAN_DESCRIPTIONS ] && [ -f $PUCKMAN_DESCRIPTIONS ] && [ -s $PUCKMAN_DESCRIPTIONS ] ;then
            if [ $PUCKMAN_DESCRIPTIONS -ot $n_days_ago ];then
                echo -en "Descriptions list in $PUCKMAN_DESCRIPTIONS is "; file_age "$PUCKMAN_DESCRIPTIONS"; echo " old"
                echo "Consider running 'puckman ls' with root to update it"
            fi
        else
            echo "Description file $PUCKMAN_DESCRIPTIONS does not exist. Run with root to create one."
            return 1
        fi
    fi
    echo
    echo -e "PROJECT\tSTARS\tDESCRIPTION\n$(cat $PUCKMAN_DESCRIPTIONS | sort )"| column -ts $'\t'
    return 0
}
showconfig(){
    (set -o posix; set  | grep '^PUCKMAN_')
}

readconfig(){
    # -e file exists
    # -f file is a regular file (not a directory or device file)
    # -s file is not zero size
    { [ -e $PUCKMAN_CONFIG ] && [ -f $PUCKMAN_CONFIG ] && [ -s $PUCKMAN_CONFIG ] ;} || return 1
    local tmpfile=$(mktemp /tmp/$__base.XXXXXX)
    grep -Ei '^[[:space:]]*[a-z_.-]+=[^[;,`()%$!#]+[[:space:]]*$' $PUCKMAN_CONFIG > $tmpfile
    source $tmpfile
    rm -f $tmpfile
}

user_is_root(){
    if [ "$EUID" -ne 0 ];then
        return 1
    fi
    return 0
}
check_environment (){
    local var_path
    local var_value
    TTY=$(tty)
    local dependencies_exist=true
    #TODO: refactor: loop through an array of necessary binaries
    if ! type file &> /dev/null; then
        echo "Please install file: e.g. apt install file"
        dependencies_exist=false
    fi
    if ! type jq &>/dev/null; then
        echo "Please install jq: e.g. apt install jq"
        dependencies_exist=false
    fi
    if [ "$dependencies_exist" = false ];then
        echo "Install dependencies before continuing"
        exit 1
    fi

    while  read -r line;do
        var_value="${!line}"
        var_path="${var_value%/*.*}"
        #echo --------------------
        #echo $line=$var_value
        #echo $var_path
        
        if [ ! -d "$var_path" ];then
            echo Location does not exist:
            echo ${line}=$var_value
            echo PATH: $var_path
            echo
            while true; do
                read -rp "Should I try to create $var_path? y / n: " yn < $TTY
                case $yn in
                    [Yy] )
                        mkdir -p "$var_path"
                        break
                        ;;
                    [Nn] )
                        echo "You can use a config file to change the path of $line as needed. "
                        exit 1
                        ;;
                    * ) echo "Please answer with y or n.";;
                esac
            done
        fi
    done < <(set -o posix; set  | grep '^PUCKMAN_' |cut -d '=' -f 1 )
}

is_git_repo(){
    git -C "$1" rev-parse 2>/dev/null; 
    return $? # 0 = git repository
}

update(){
    if is_git_repo "$__dir";then
        # repo must be 'pristine' for this to work
        # otherwise you're on your own
        echo "updating local repository under $__dir"
        git -C "$__dir" pull || echo -e "Tried command:\n\ngit -C \"$__dir\" pull\n"
    else
        local url_size=$(url_size "$UPDATE_LINK")
        local url_timestamp=$(url_timestamp "$UPDATE_LINK")
        local local_size=$(stat --format %s "$__file")
        local local_timestamp=$(stat --format %Y "$__file")

        echo 
        echo "local_timestamp: $local_timestamp $(date -d @${local_timestamp})"
        echo "url_timestamp:   $url_timestamp $(date -s @${url_timestamp})"
        echo "local_size:      $local_size Bytes"
        echo "url_size:        $url_size Bytes"
        echo
        local temp=$(mktemp)
        $WGET "$UPDATE_LINK?$(date +%s)" -O $temp

        # Does the current file have the same md5 than the downloaded one?
        if echo "$(md5sum "$temp" | awk '{print $1}') $__file" | md5sum --check --status; then
            echo No update needed.
        else 
            echo "Checksums don't match. Download the file"
            echo "Downloading from link: $UPDATE_LINK to location: $__file"
            mv "$temp" "$__file"
            #ensure execution permissions
            chmod 755 "$__file"
        fi
    fi
}



###############
###Real MEAT###
###############

# Full path and filename
__file="$(readlink -f "${BASH_SOURCE[0]}")"
# Directory where this script is located
__dir="$(cd "$(dirname "${__file}")" && pwd)"
# Only filename
__base="$(basename ${__file} .sh)"
# Parent folder
__root="$(cd "$(dirname "${__dir}")" && pwd)"

check_environment

usage="
puckman (v2.9)
=======
Installs software from github releases


Usage:
    puckman <action> [package name]

Actions:
    ls
            list available packages

    install <package name>
            duh!

    search <search term>
            searches repositories in github. It presents a limited set of the
            most popular results and offers the possibility to install

    <package name>
            (no action specified) search and install if unique
    update
            updates puckman downloading the latest code from Github

"

WGET="wget -T 5 --tries=1"
GITHUB_TOKEN=""
UPDATE_LINK="https://raw.githubusercontent.com/pandiloko/puckman/master/puckman"

case $# in
    0) 
        echo "$usage" && exit 0
        ;;
    1) 
        case "$1" in
            update|upgrade)
                action=update
                ;;
            h|-h|--help|help)
                echo "$usage" && exit 0
                ;;
            ls|list)
                action=list
                ;;
            *)
                action=install
                package="$1"
                ;;
        esac
        ;;
    2) 
        action="$1"
        package="$2"
        ;;
    *) 
        echo $usage && exit 1
        ;;
esac

get_env_vars
get_github_token

readconfig

check_environment


case $action in
    update)
        user_is_root || { echo "User must be root to $action puckman" && exit 1 ;}
        update
        ;;
    remove|uninstall|delete)
        echo "Action $action not implemented" && exit 1
        ;;
    list)
        list
        exit $?
        ;;
    install)
        user_is_root || { echo "User must be root to $action $package" && exit 1 ;}
        showconfig
        install
        ;;
    search|query|find)
        if search;then
            install
        fi
        ;;
    *)
        echo "I don't know how to $action $package"
        exit 1
        ;;
esac

exit 0

